using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using OngProject.Controllers;
using OngProject.Core.DTOs;
using OngProject.Core.Interfaces;
using OngProject.Core.Interfaces.IServices;
using OngProject.Core.Mapper;
using OngProject.Core.Models;
using OngProject.Core.Services;
using OngProject.Infrastructure.Data;
using OngProject.Infrastructure.Repositories;
using OngProject.Test.Helper;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace OngProject.Test.Tests
{
    [TestClass]
    public class OrganizationControllerTests : BaseTests
    {
        private readonly ApplicationDbContext _context;
        private readonly OrganizationController _organizationController;
        
        
        public OrganizationControllerTests()
        {
            _context = MakeContext("OrganizationTestsDB");
            var builder = new ConfigurationBuilder().AddJsonFile($"appsettings.json", optional: false);
            IConfiguration configuration = builder.Build();
            IAWSService awsService = new AWSHandlerFilesService(configuration);
            IUnitOfWork unitOfWork = new UnitOfWork(_context);            
            IOrganizationService organizationService = new OrganizationService(unitOfWork, awsService);
           _organizationController = new OrganizationController(organizationService);            
        }

        [TestCleanup]
        public async Task DatabaseCleanup()
        {
            await _context.Database.EnsureDeletedAsync();
        }

        [TestMethod]
        public async Task GetOrganization_ShouldReturn200Ok_IfOrganizationExists()
        {
            // Arrange             
            await _context.Organizations.AddAsync(new OrganizationModel
            {                
                Name = "testName",
                Image = "testImage",
                Phone = 12345678,
                Address = "testAddres",
                FacebookURL = "facebookTest",
                InstagramURL = "instagramTest",
                LinkedinURL = "linkedinTest"               
            });

            await _context.SaveChangesAsync();

            // Act
            var actual = await _organizationController.GetOrganization();
            var result = actual as OkObjectResult;
            var value = result.Value;
            var actualOrganization = value as OrganizationDTO;
            var expectedStatusCode = 200;

            var expected = new OrganizationDTO()
            {
                Name = "testName",
                Image = "testImage",
                Phone = 12345678,
                Address = "testAddres",
                FacebookURL = "facebookTest",
                InstagramURL = "instagramTest",
                LinkedinURL = "linkedinTest",
                Slides =  new List<SlideOrganizationDTO>()
            };
           
            // Assert            
            Assert.AreEqual(expectedStatusCode, result.StatusCode);
            Assert.IsInstanceOfType(value, typeof(OrganizationDTO));
            Assert.AreEqual(expected.Name, actualOrganization.Name);
            Assert.AreEqual(expected.Image, actualOrganization.Image);
            Assert.AreEqual(expected.Phone, actualOrganization.Phone);
            Assert.AreEqual(expected.Address, actualOrganization.Address);
            Assert.AreEqual(expected.FacebookURL, actualOrganization.FacebookURL);
            Assert.AreEqual(expected.InstagramURL, actualOrganization.InstagramURL);
            Assert.AreEqual(expected.LinkedinURL, actualOrganization.LinkedinURL);
            Assert.AreEqual(expected.Slides.Count, actualOrganization.Slides.Count);
        }

        [TestMethod]
        public async Task GetOrganization_WithNoOrganization_ShouldReturnNotFound()
        {
            // Arrange           
            await DatabaseCleanup();
           
            // Act
            var actual = await _organizationController.GetOrganization();

            var result = actual as StatusCodeResult;

            var expected = 404;                       

            // Assert
            Assert.AreEqual(expected,result.StatusCode);
        }

        [TestMethod]
        public async Task UpdateOrganization_ShouldReturn200Ok_IfUpdateSuccess()
        {
            // Arrange
            var mapper = new EntityMapper();                       

            await _context.Organizations.AddAsync(new OrganizationModel
            {
                Name = "testName",
                Image = "testImage",
                Phone = 12345678,
                Address = "testAddres",
                FacebookURL = "facebookTest",
                InstagramURL = "instagramTest",
                LinkedinURL = "linkedinTest"               
            });

            await _context.SaveChangesAsync(); 

            var updateDTO = new OrganizationUpdateDTO
            {
                Name = "updateName",
                Image = "",
                Address = "updateAddress",
                Phone = 12345,
                Email = "updateEmail",
                WelcomeText = "updateWelcomeText",
                AboutUsText = "updateAboutUsText",
                FacebookURL = "updateFacebook",
                LinkedinURL = "updateLinkedin",
                InstagramURL = "updateInstagram"
            };

            // Act
            var expectedStatusCode = 200;
            var expectedValue = "Organization has been modified successfully.";
            var actual = await _organizationController.Update(updateDTO);            
            var result = actual as OkObjectResult;
            var value = result.Value;
            var updatedOrganization = await _organizationController.GetOrganization();
            var updatedResult = updatedOrganization as OkObjectResult;
            var updatedValue = updatedResult.Value as OrganizationDTO;

            // Assert
            Assert.AreEqual(expectedStatusCode, result.StatusCode);
            Assert.AreEqual(expectedValue, value);
            Assert.IsInstanceOfType(value, typeof(string));
            Assert.AreEqual(updateDTO.Name, updatedValue.Name);
            Assert.AreEqual(updateDTO.Image, updatedValue.Image);
            Assert.AreEqual(updateDTO.Phone, updatedValue.Phone);
            Assert.AreEqual(updateDTO.Address, updatedValue.Address); 
            Assert.AreEqual(updateDTO.FacebookURL, updatedValue.FacebookURL);
            Assert.AreEqual(updateDTO.LinkedinURL, updatedValue.LinkedinURL);
            Assert.AreEqual(updateDTO.InstagramURL, updatedValue.InstagramURL);
        }

        [TestMethod]
        public async Task UpdateOrganization_WithWrongEntityData_ShouldThrowException()
        {
            // Arrange
            await DatabaseCleanup();

            await _context.Organizations.AddAsync(new OrganizationModel
            {
                Name = "testName",
                Image = "testImage",
                Phone = 12345678,
                Address = "testAddres",
                FacebookURL = "facebookTest",
                InstagramURL = "instagramTest",
                LinkedinURL = "linkedinTest"
            });

            await _context.SaveChangesAsync();

            var testUpdate = new OrganizationUpdateDTO
            {     
                Address = "updateAddress",
                Phone = 12345,
                AboutUsText = "updateAboutUsText",
                FacebookURL = "updateFacebook",
                LinkedinURL = "updateLinkedin",
                InstagramURL = "updateInstagram"
            }; 
            
            // Act           
            var expected = 500;                        

            var actual = _organizationController.Update(testUpdate);

            var result = actual.Result as ObjectResult;            

            // Assert
            Assert.AreEqual(expected, result.StatusCode);
        }
    }
}
